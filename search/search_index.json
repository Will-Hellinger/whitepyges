{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to the Whitepyges Developer Docs!</p>"},{"location":"api/address.html","title":"Address","text":""},{"location":"api/address.html#developer-docs","title":"Developer docs","text":"<p>A class to represent an address</p> Source code in <code>src/whitepyges/address.py</code> <pre><code>class Address:\n    \"\"\"\n    A class to represent an address\n    \"\"\"\n\n    def __init__(\n        self,\n        street: str = None,\n        city: str = None,\n        state: str = None,\n        zip_code: str = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize a new Address object\n\n        Args:\n            street (str): The street of the address\n            city (str): The city of the address\n            state (str): The state of the address\n            zip_code (str): The zip code of the address\n\n        Returns:\n            None\n        \"\"\"\n\n        if not street:\n            raise ValueError(\"Street is required\")\n\n        if not city:\n            raise ValueError(\"City is required\")\n\n        if not state and not zip_code:\n            raise ValueError(\"State or zip code is required\")\n\n        self.street = helper.format_street(street)\n        self.location = helper.format_location(city, state, zip_code)\n\n        self.headers = config.HEADERS\n\n    def search(\n        self,\n        timeout: int = 10,\n        max_retries: int = 3,\n        randomize_headers: bool = False,\n        ignore_robots: bool = False,\n    ) -&gt; list[dict] | None:\n        \"\"\"\n        Perform a search for the address\n\n        Args:\n            timeout (int, optional): The timeout for the request. Defaults to 10.\n            max_retries (int, optional): The maximum number of retries. Defaults to 3.\n            randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n            ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n        Returns:\n            list[dict] | None: Possible data for the address\n        \"\"\"\n\n        endpoint: str = \"address\"\n\n        url: str = helper.get_endpoint(\n            \"address\", endpoint, address=self.street, location=self.location\n        )\n\n        headers: dict = self.headers\n        if randomize_headers:\n            headers = helper.get_random_headers()\n\n        response: requests.Response = helper.make_request_with_retries(\n            url, headers, max_retries, timeout, ignore_robots\n        )\n\n        soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n\n        residents: list[dict] = []\n\n        for div in soup.find_all(\"div\", {\"data-qa-selector\": \"resident\"}):\n            person_name: str = div.find(\n                \"a\", class_=\"tw-text-link tw-font-bold\"\n            ).get_text(strip=True)\n            person_url: str = div.find(\"a\", class_=\"tw-text-link tw-font-bold\")[\"href\"]\n            person_age: str = div.find(\"span\", class_=\"tw-font-bold\").get_text(\n                strip=True\n            )\n\n            if person_age == \"--\":\n                person_age = None\n\n            person_data: dict = {\n                \"name\": person_name,\n                \"url\": config.BASE_URL + person_url,\n                \"age\": person_age,\n            }\n\n            residents.append(person_data)\n\n        return residents\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Return the string representation of the object\n\n        Returns:\n            str: The string representation of the object\n        \"\"\"\n\n        return helper.format_repr(self)\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Return the string representation of the object\n\n        Returns:\n            str: The string representation of the object\n        \"\"\"\n\n        return helper.format_str(self)\n</code></pre>"},{"location":"api/address.html#whitepyges.address.Address.__init__","title":"<code>__init__</code>","text":"<p>Initialize a new Address object</p> <p>Parameters:</p> Name Type Description Default <code>street</code> <code>str</code> <p>The street of the address</p> <code>None</code> <code>city</code> <code>str</code> <p>The city of the address</p> <code>None</code> <code>state</code> <code>str</code> <p>The state of the address</p> <code>None</code> <code>zip_code</code> <code>str</code> <p>The zip code of the address</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/whitepyges/address.py</code> <pre><code>def __init__(\n    self,\n    street: str = None,\n    city: str = None,\n    state: str = None,\n    zip_code: str = None,\n) -&gt; None:\n    \"\"\"\n    Initialize a new Address object\n\n    Args:\n        street (str): The street of the address\n        city (str): The city of the address\n        state (str): The state of the address\n        zip_code (str): The zip code of the address\n\n    Returns:\n        None\n    \"\"\"\n\n    if not street:\n        raise ValueError(\"Street is required\")\n\n    if not city:\n        raise ValueError(\"City is required\")\n\n    if not state and not zip_code:\n        raise ValueError(\"State or zip code is required\")\n\n    self.street = helper.format_street(street)\n    self.location = helper.format_location(city, state, zip_code)\n\n    self.headers = config.HEADERS\n</code></pre>"},{"location":"api/address.html#whitepyges.address.Address.__repr__","title":"<code>__repr__</code>","text":"<p>Return the string representation of the object</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the object</p> Source code in <code>src/whitepyges/address.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Return the string representation of the object\n\n    Returns:\n        str: The string representation of the object\n    \"\"\"\n\n    return helper.format_repr(self)\n</code></pre>"},{"location":"api/address.html#whitepyges.address.Address.__str__","title":"<code>__str__</code>","text":"<p>Return the string representation of the object</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the object</p> Source code in <code>src/whitepyges/address.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Return the string representation of the object\n\n    Returns:\n        str: The string representation of the object\n    \"\"\"\n\n    return helper.format_str(self)\n</code></pre>"},{"location":"api/address.html#whitepyges.address.Address.search","title":"<code>search</code>","text":"<p>Perform a search for the address</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The timeout for the request. Defaults to 10.</p> <code>10</code> <code>max_retries</code> <code>int</code> <p>The maximum number of retries. Defaults to 3.</p> <code>3</code> <code>randomize_headers</code> <code>bool</code> <p>Randomize the headers for the request. Defaults to False.</p> <code>False</code> <code>ignore_robots</code> <code>bool</code> <p>Ignore the robots.txt file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict] | None</code> <p>list[dict] | None: Possible data for the address</p> Source code in <code>src/whitepyges/address.py</code> <pre><code>def search(\n    self,\n    timeout: int = 10,\n    max_retries: int = 3,\n    randomize_headers: bool = False,\n    ignore_robots: bool = False,\n) -&gt; list[dict] | None:\n    \"\"\"\n    Perform a search for the address\n\n    Args:\n        timeout (int, optional): The timeout for the request. Defaults to 10.\n        max_retries (int, optional): The maximum number of retries. Defaults to 3.\n        randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n        ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n    Returns:\n        list[dict] | None: Possible data for the address\n    \"\"\"\n\n    endpoint: str = \"address\"\n\n    url: str = helper.get_endpoint(\n        \"address\", endpoint, address=self.street, location=self.location\n    )\n\n    headers: dict = self.headers\n    if randomize_headers:\n        headers = helper.get_random_headers()\n\n    response: requests.Response = helper.make_request_with_retries(\n        url, headers, max_retries, timeout, ignore_robots\n    )\n\n    soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n\n    residents: list[dict] = []\n\n    for div in soup.find_all(\"div\", {\"data-qa-selector\": \"resident\"}):\n        person_name: str = div.find(\n            \"a\", class_=\"tw-text-link tw-font-bold\"\n        ).get_text(strip=True)\n        person_url: str = div.find(\"a\", class_=\"tw-text-link tw-font-bold\")[\"href\"]\n        person_age: str = div.find(\"span\", class_=\"tw-font-bold\").get_text(\n            strip=True\n        )\n\n        if person_age == \"--\":\n            person_age = None\n\n        person_data: dict = {\n            \"name\": person_name,\n            \"url\": config.BASE_URL + person_url,\n            \"age\": person_age,\n        }\n\n        residents.append(person_data)\n\n    return residents\n</code></pre>"},{"location":"api/address.html#features","title":"Features","text":"<ul> <li>Search for residents at a specific address</li> <li>Returns names, profile URLs, and ages (if available)</li> <li>Handles request retries and optional header randomization</li> </ul>"},{"location":"api/address.html#example-usage","title":"Example Usage","text":"<pre><code>from whitepyges import Address\n\naddress: Address = Address(street='123 Test Street', city='New York', state='NY')\ninfo: dict = address.search()\n\nprint(info)\n</code></pre>"},{"location":"api/address.html#example-response","title":"Example Response","text":"<pre><code>[\n    {\n        \"name\": \"Jon Doe\",\n        \"url\": \"https://www.whitepages.com/name/Jon-Doe/Example-WA/random_numbers\",\n        \"age\": \"22\"\n    },\n    {\n        \"name\": \"Jon Doe-2\",\n        \"url\": \"https://www.whitepages.com/name/Jon-Doe-2/Example-WA/random_numbers-2\",\n        \"age\": null\n    }\n]\n</code></pre>"},{"location":"api/person.html","title":"Person","text":""},{"location":"api/person.html#developer-docs","title":"Developer docs","text":"<p>A class to represent a person</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>class Person:\n    \"\"\"\n    A class to represent a person\n    \"\"\"\n\n    def __init__(\n        self,\n        first_name: str,\n        last_name: str,\n        age: int | None = None,\n        city: str | None = None,\n        state: str | None = None,\n        zip_code: str | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize a new Person object\n\n        Args:\n            first_name (str): The first name of the person\n            last_name (str): The last name of the person\n            age (int, optional): The age of the person. Defaults to None.\n            city (str, optional): The city of the person. Defaults to None.\n            state (str, optional): The state of the person. Defaults to None.\n            zip_code (str, optional): The zip code of the person. Defaults to None.\n\n        Returns:\n            None\n        \"\"\"\n\n        if not first_name or not last_name:\n            raise ValueError(\"First name and last name are required\")\n\n        if not isinstance(first_name, str) or not isinstance(last_name, str):\n            raise ValueError(\"First name and last name must be strings\")\n\n        self.name = helper.format_name(first_name, last_name)\n        self.age = helper.format_age(age)\n        self.location = helper.format_location(city, state, zip_code)\n\n        self.headers = config.HEADERS\n\n        self.logger = logging.getLogger(f\"Person-{self.name}\")\n        logging.basicConfig(level=logging.WARNING)\n\n        self.logger.info(f\"Initialized Person object: {repr(self)}\")\n\n    def _clean_person_data(self, person_data: dict, age: str) -&gt; list[dict]:\n        \"\"\"\n        Clean the person data by filtering and repositioning the items.\n\n        Args:\n            person_data (dict): The raw person data.\n            age (str): The age of the person.\n\n        Returns:\n            list[dict]: The cleaned list of items.\n        \"\"\"\n\n        raw_items: list[dict] = person_data.get(\"itemListElement\", [])\n        cleaned_items: list[dict] = []\n\n        for item in raw_items:\n            if item.get(\"@type\") != \"ListItem\":\n                continue\n\n            item_data: dict = item.get(\"item\", {})\n\n            if item_data.get(\"@type\") != \"Person\":\n                continue\n\n            if age is not None:\n                if not item_data.get(\"description\", \"\").startswith(\n                    f\"{item_data.get('name')} in their {age}\"\n                ) and not item_data.get(\"description\", \"\").startswith(\n                    f\"{item_data.get('name')},\"\n                ):\n                    continue\n\n            item_data.pop(\"@type\", None)\n\n            item_data[\"url\"] = config.BASE_URL + item_data.get(\"url\", \"\")\n\n            cleaned_items.append(item_data)\n\n        return cleaned_items\n\n    def search(\n        self,\n        count: int = -1,\n        timeout: int = 10,\n        max_retries: int = 3,\n        randomize_headers: bool = False,\n        ignore_robots: bool = False,\n    ) -&gt; list[dict] | None:\n        \"\"\"\n        Perform a search for the person\n\n        Args:\n            count (int, optional): The number of results to return. -1 returns all results. Defaults to -1.\n            timeout (int, optional): The timeout for the request. Defaults to 10.\n            max_retries (int, optional): The maximum number of retries. Defaults to 3.\n            randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n            ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n        Returns:\n            list[dict] | None: Possible data for the person\n        \"\"\"\n\n        if count == 0 or count &lt; -1:\n            self.logger.error(\"Count must be a positive integer or -1\")\n            raise ValueError(\"Count must be a positive integer or -1\")\n\n        endpoint: str = \"name\"\n\n        if self.location:\n            endpoint = \"name_and_location\"\n\n        url: str = helper.get_endpoint(\n            \"people\", endpoint, name=self.name, location=self.location\n        )\n\n        search_headers: dict = self.headers.copy()  # dont modify the original headers\n        if randomize_headers:\n            search_headers = helper.get_random_headers()\n\n        response: requests.Response = helper.make_request_with_retries(\n            url, search_headers, max_retries, timeout, ignore_robots\n        )\n\n        soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n        script_tag = soup.find(\"script\", type=\"application/ld+json\")\n\n        if not script_tag:\n            self.logger.warning(\"No script tag found in the response\")\n            return None\n\n        # This is only really a list with one item (I would assume this is for the pages of users)\n        person_data: dict = json.loads(script_tag.string)[0]\n\n        cleaned_items: list[dict] = self._clean_person_data(person_data, self.age)\n\n        return (\n            cleaned_items[:count]\n            if count != -1 and count &lt;= len(cleaned_items)\n            else cleaned_items\n        )\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Return an unambiguous string representation of the Person object.\n\n        Returns:\n            str: The unambiguous string representation of the Person object\n        \"\"\"\n\n        return helper.format_repr(self)\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Return a readable string representation of the Person object.\n\n        Returns:\n            str: The readable string representation of the Person object\n        \"\"\"\n\n        return helper.format_str(self)\n</code></pre>"},{"location":"api/person.html#whitepyges.person.Person.__init__","title":"<code>__init__</code>","text":"<p>Initialize a new Person object</p> <p>Parameters:</p> Name Type Description Default <code>first_name</code> <code>str</code> <p>The first name of the person</p> required <code>last_name</code> <code>str</code> <p>The last name of the person</p> required <code>age</code> <code>int</code> <p>The age of the person. Defaults to None.</p> <code>None</code> <code>city</code> <code>str</code> <p>The city of the person. Defaults to None.</p> <code>None</code> <code>state</code> <code>str</code> <p>The state of the person. Defaults to None.</p> <code>None</code> <code>zip_code</code> <code>str</code> <p>The zip code of the person. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>def __init__(\n    self,\n    first_name: str,\n    last_name: str,\n    age: int | None = None,\n    city: str | None = None,\n    state: str | None = None,\n    zip_code: str | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize a new Person object\n\n    Args:\n        first_name (str): The first name of the person\n        last_name (str): The last name of the person\n        age (int, optional): The age of the person. Defaults to None.\n        city (str, optional): The city of the person. Defaults to None.\n        state (str, optional): The state of the person. Defaults to None.\n        zip_code (str, optional): The zip code of the person. Defaults to None.\n\n    Returns:\n        None\n    \"\"\"\n\n    if not first_name or not last_name:\n        raise ValueError(\"First name and last name are required\")\n\n    if not isinstance(first_name, str) or not isinstance(last_name, str):\n        raise ValueError(\"First name and last name must be strings\")\n\n    self.name = helper.format_name(first_name, last_name)\n    self.age = helper.format_age(age)\n    self.location = helper.format_location(city, state, zip_code)\n\n    self.headers = config.HEADERS\n\n    self.logger = logging.getLogger(f\"Person-{self.name}\")\n    logging.basicConfig(level=logging.WARNING)\n\n    self.logger.info(f\"Initialized Person object: {repr(self)}\")\n</code></pre>"},{"location":"api/person.html#whitepyges.person.Person.__repr__","title":"<code>__repr__</code>","text":"<p>Return an unambiguous string representation of the Person object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unambiguous string representation of the Person object</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Return an unambiguous string representation of the Person object.\n\n    Returns:\n        str: The unambiguous string representation of the Person object\n    \"\"\"\n\n    return helper.format_repr(self)\n</code></pre>"},{"location":"api/person.html#whitepyges.person.Person.__str__","title":"<code>__str__</code>","text":"<p>Return a readable string representation of the Person object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The readable string representation of the Person object</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Return a readable string representation of the Person object.\n\n    Returns:\n        str: The readable string representation of the Person object\n    \"\"\"\n\n    return helper.format_str(self)\n</code></pre>"},{"location":"api/person.html#whitepyges.person.Person._clean_person_data","title":"<code>_clean_person_data</code>","text":"<p>Clean the person data by filtering and repositioning the items.</p> <p>Parameters:</p> Name Type Description Default <code>person_data</code> <code>dict</code> <p>The raw person data.</p> required <code>age</code> <code>str</code> <p>The age of the person.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: The cleaned list of items.</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>def _clean_person_data(self, person_data: dict, age: str) -&gt; list[dict]:\n    \"\"\"\n    Clean the person data by filtering and repositioning the items.\n\n    Args:\n        person_data (dict): The raw person data.\n        age (str): The age of the person.\n\n    Returns:\n        list[dict]: The cleaned list of items.\n    \"\"\"\n\n    raw_items: list[dict] = person_data.get(\"itemListElement\", [])\n    cleaned_items: list[dict] = []\n\n    for item in raw_items:\n        if item.get(\"@type\") != \"ListItem\":\n            continue\n\n        item_data: dict = item.get(\"item\", {})\n\n        if item_data.get(\"@type\") != \"Person\":\n            continue\n\n        if age is not None:\n            if not item_data.get(\"description\", \"\").startswith(\n                f\"{item_data.get('name')} in their {age}\"\n            ) and not item_data.get(\"description\", \"\").startswith(\n                f\"{item_data.get('name')},\"\n            ):\n                continue\n\n        item_data.pop(\"@type\", None)\n\n        item_data[\"url\"] = config.BASE_URL + item_data.get(\"url\", \"\")\n\n        cleaned_items.append(item_data)\n\n    return cleaned_items\n</code></pre>"},{"location":"api/person.html#whitepyges.person.Person.search","title":"<code>search</code>","text":"<p>Perform a search for the person</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of results to return. -1 returns all results. Defaults to -1.</p> <code>-1</code> <code>timeout</code> <code>int</code> <p>The timeout for the request. Defaults to 10.</p> <code>10</code> <code>max_retries</code> <code>int</code> <p>The maximum number of retries. Defaults to 3.</p> <code>3</code> <code>randomize_headers</code> <code>bool</code> <p>Randomize the headers for the request. Defaults to False.</p> <code>False</code> <code>ignore_robots</code> <code>bool</code> <p>Ignore the robots.txt file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict] | None</code> <p>list[dict] | None: Possible data for the person</p> Source code in <code>src/whitepyges/person.py</code> <pre><code>def search(\n    self,\n    count: int = -1,\n    timeout: int = 10,\n    max_retries: int = 3,\n    randomize_headers: bool = False,\n    ignore_robots: bool = False,\n) -&gt; list[dict] | None:\n    \"\"\"\n    Perform a search for the person\n\n    Args:\n        count (int, optional): The number of results to return. -1 returns all results. Defaults to -1.\n        timeout (int, optional): The timeout for the request. Defaults to 10.\n        max_retries (int, optional): The maximum number of retries. Defaults to 3.\n        randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n        ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n    Returns:\n        list[dict] | None: Possible data for the person\n    \"\"\"\n\n    if count == 0 or count &lt; -1:\n        self.logger.error(\"Count must be a positive integer or -1\")\n        raise ValueError(\"Count must be a positive integer or -1\")\n\n    endpoint: str = \"name\"\n\n    if self.location:\n        endpoint = \"name_and_location\"\n\n    url: str = helper.get_endpoint(\n        \"people\", endpoint, name=self.name, location=self.location\n    )\n\n    search_headers: dict = self.headers.copy()  # dont modify the original headers\n    if randomize_headers:\n        search_headers = helper.get_random_headers()\n\n    response: requests.Response = helper.make_request_with_retries(\n        url, search_headers, max_retries, timeout, ignore_robots\n    )\n\n    soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n    script_tag = soup.find(\"script\", type=\"application/ld+json\")\n\n    if not script_tag:\n        self.logger.warning(\"No script tag found in the response\")\n        return None\n\n    # This is only really a list with one item (I would assume this is for the pages of users)\n    person_data: dict = json.loads(script_tag.string)[0]\n\n    cleaned_items: list[dict] = self._clean_person_data(person_data, self.age)\n\n    return (\n        cleaned_items[:count]\n        if count != -1 and count &lt;= len(cleaned_items)\n        else cleaned_items\n    )\n</code></pre>"},{"location":"api/person.html#features","title":"Features","text":"<ul> <li>Search for people by first name, last name, and state</li> <li>Returns names, profile URLs, addresses, phone numbers, and related people</li> <li>Handles request retries and optional header randomization</li> </ul>"},{"location":"api/person.html#example-usage","title":"Example Usage","text":"<pre><code>from whitepyges import Person\n\nperson: Person = Person(first_name='John', last_name='Doe', state='WA')\ninfo: dict = person.search()\n\nprint(info)\n</code></pre>"},{"location":"api/person.html#example-response","title":"Example Response","text":"<pre><code>[\n    {\n        \"name\": \"Jon Doe\",\n        \"givenName\": \"Jon\",\n        \"familyName\": \"Doe\",\n        \"description\": \"Jon Doe in their 70s, currently living in Example, WA\",\n        \"url\": \"https://www.whitepages.com/name/Jon-Doe/Example-WA/random_letters\",\n        \"address\": [\n            {\n                \"@type\": \"PostalAddress\",\n                \"streetAddress\": \"123 St\",\n                \"addressLocality\": \"Example\",\n                \"addressRegion\": \"WA\",\n                \"addressCountry\": \"US\"\n            }\n        ],\n        \"telephone\": \"(123) 456-7890\",\n        \"relatedTo\": []\n    },\n    {\n        \"name\": \"Jon Doe\",\n        \"givenName\": \"Jon\",\n        \"familyName\": \"Doe\",\n        \"description\": \"Jon Doe in their 40s, currently living in Example-2, WA\",\n        \"url\": \"https://www.whitepages.com/name/Jon-Doe/Example-2-WA/random_letters2\",\n        \"address\": [\n            {\n                \"@type\": \"PostalAddress\",\n                \"streetAddress\": \"123 Ave\",\n                \"addressLocality\": \"Example-2\",\n                \"addressRegion\": \"WA\",\n                \"addressCountry\": \"US\"\n            }\n        ],\n        \"telephone\": \"(123) 456-7890\",\n        \"relatedTo\": []\n    }\n]\n</code></pre>"},{"location":"api/phone.html","title":"Phone","text":""},{"location":"api/phone.html#developer-docs","title":"Developer docs","text":"<p>A class to represent a phone number</p> Source code in <code>src/whitepyges/phone.py</code> <pre><code>class Phone:\n    \"\"\"\n    A class to represent a phone number\n    \"\"\"\n\n    def __init__(self, phone_number: str) -&gt; None:\n        \"\"\"\n        Initialize a new Phone object\n\n        Args:\n            phone_number (str): The phone number to search\n\n        Returns:\n            None\n        \"\"\"\n\n        if not phone_number:\n            raise ValueError(\"Phone number is required\")\n\n        self.phone_number = helper.format_phone_number(phone_number)\n\n        self.headers = config.HEADERS\n\n    def search(\n        self,\n        timeout: int = 10,\n        max_retries: int = 3,\n        randomize_headers: bool = False,\n        ignore_robots: bool = False,\n    ) -&gt; dict | None:\n        \"\"\"\n        Perform a search for the phone number\n\n        Args:\n            timeout (int, optional): The timeout for the request. Defaults to 10.\n            max_retries (int, optional): The maximum number of retries. Defaults to 3.\n            randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n            ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n        Returns:\n            list[dict] | None: Possible data for the phone number\n        \"\"\"\n\n        endpoint: str = \"number\"\n\n        url: str = helper.get_endpoint(\"phone\", endpoint, number=self.phone_number)\n\n        print(url)\n\n        headers: dict = self.headers\n        if randomize_headers:\n            headers = helper.get_random_headers()\n\n        response: requests.Response = helper.make_request_with_retries(\n            url, headers, max_retries, timeout, ignore_robots\n        )\n\n        soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n\n        phone_info_div = soup.find(\n            \"div\", {\"data-qa-selector\": \"phone-header-area-code-info\"}\n        )\n        spam_info_div = soup.find(\"a\", {\"class\": \"wp-chip\"})\n\n        if not phone_info_div and not spam_info_div:\n            return None\n\n        splitting_info: tuple[str] = (\n            \"their location and provider\",\n            \"Area code location\",\n            \"Other major (\",\n            \") cities\",\n        )\n\n        phone_info: str = phone_info_div.get_text(strip=True)\n\n        for info in splitting_info:\n            if info in phone_info:\n                phone_info = phone_info.replace(info, f\"|{info}|\")\n\n        phone_info_list: list[str] = phone_info.split(\"|\")\n\n        spam_info: str = \"No spam info available\"\n        if spam_info_div:\n            spam_info = spam_info_div.get_text(strip=True)\n\n        state: str = \"Unknown\"\n        cities: str = \"Unkown\"\n\n        if \"their location and provider\" in phone_info_list:\n            state = phone_info_list[phone_info_list.index(\"their location and provider\") + 1]\n\n        if \"Area code location\" in phone_info_list:\n            cities = phone_info_list[phone_info_list.index(\"Area code location\") + 1]\n\n        formatted_phone_info: dict = {\n            \"spam_info\": spam_info,\n            \"state\": state,\n            \"cities\": cities,\n            \"area_code\": self.phone_number[2:5] if self.phone_number else \"Unknown\",\n            \"url\": url,\n        }\n\n        return formatted_phone_info\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Return the string representation of the object\n\n        Returns:\n            str: The string representation of the object\n        \"\"\"\n\n        return helper.format_repr(self)\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Return the string representation of the object\n\n        Returns:\n            str: The string representation of the object\n        \"\"\"\n\n        return helper.format_str(self)\n</code></pre>"},{"location":"api/phone.html#whitepyges.phone.Phone.__init__","title":"<code>__init__</code>","text":"<p>Initialize a new Phone object</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>str</code> <p>The phone number to search</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/whitepyges/phone.py</code> <pre><code>def __init__(self, phone_number: str) -&gt; None:\n    \"\"\"\n    Initialize a new Phone object\n\n    Args:\n        phone_number (str): The phone number to search\n\n    Returns:\n        None\n    \"\"\"\n\n    if not phone_number:\n        raise ValueError(\"Phone number is required\")\n\n    self.phone_number = helper.format_phone_number(phone_number)\n\n    self.headers = config.HEADERS\n</code></pre>"},{"location":"api/phone.html#whitepyges.phone.Phone.__repr__","title":"<code>__repr__</code>","text":"<p>Return the string representation of the object</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the object</p> Source code in <code>src/whitepyges/phone.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Return the string representation of the object\n\n    Returns:\n        str: The string representation of the object\n    \"\"\"\n\n    return helper.format_repr(self)\n</code></pre>"},{"location":"api/phone.html#whitepyges.phone.Phone.__str__","title":"<code>__str__</code>","text":"<p>Return the string representation of the object</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the object</p> Source code in <code>src/whitepyges/phone.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Return the string representation of the object\n\n    Returns:\n        str: The string representation of the object\n    \"\"\"\n\n    return helper.format_str(self)\n</code></pre>"},{"location":"api/phone.html#whitepyges.phone.Phone.search","title":"<code>search</code>","text":"<p>Perform a search for the phone number</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The timeout for the request. Defaults to 10.</p> <code>10</code> <code>max_retries</code> <code>int</code> <p>The maximum number of retries. Defaults to 3.</p> <code>3</code> <code>randomize_headers</code> <code>bool</code> <p>Randomize the headers for the request. Defaults to False.</p> <code>False</code> <code>ignore_robots</code> <code>bool</code> <p>Ignore the robots.txt file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict | None</code> <p>list[dict] | None: Possible data for the phone number</p> Source code in <code>src/whitepyges/phone.py</code> <pre><code>def search(\n    self,\n    timeout: int = 10,\n    max_retries: int = 3,\n    randomize_headers: bool = False,\n    ignore_robots: bool = False,\n) -&gt; dict | None:\n    \"\"\"\n    Perform a search for the phone number\n\n    Args:\n        timeout (int, optional): The timeout for the request. Defaults to 10.\n        max_retries (int, optional): The maximum number of retries. Defaults to 3.\n        randomize_headers (bool, optional): Randomize the headers for the request. Defaults to False.\n        ignore_robots (bool, optional): Ignore the robots.txt file. Defaults to False.\n\n    Returns:\n        list[dict] | None: Possible data for the phone number\n    \"\"\"\n\n    endpoint: str = \"number\"\n\n    url: str = helper.get_endpoint(\"phone\", endpoint, number=self.phone_number)\n\n    print(url)\n\n    headers: dict = self.headers\n    if randomize_headers:\n        headers = helper.get_random_headers()\n\n    response: requests.Response = helper.make_request_with_retries(\n        url, headers, max_retries, timeout, ignore_robots\n    )\n\n    soup: BeautifulSoup = BeautifulSoup(response.text, \"html.parser\")\n\n    phone_info_div = soup.find(\n        \"div\", {\"data-qa-selector\": \"phone-header-area-code-info\"}\n    )\n    spam_info_div = soup.find(\"a\", {\"class\": \"wp-chip\"})\n\n    if not phone_info_div and not spam_info_div:\n        return None\n\n    splitting_info: tuple[str] = (\n        \"their location and provider\",\n        \"Area code location\",\n        \"Other major (\",\n        \") cities\",\n    )\n\n    phone_info: str = phone_info_div.get_text(strip=True)\n\n    for info in splitting_info:\n        if info in phone_info:\n            phone_info = phone_info.replace(info, f\"|{info}|\")\n\n    phone_info_list: list[str] = phone_info.split(\"|\")\n\n    spam_info: str = \"No spam info available\"\n    if spam_info_div:\n        spam_info = spam_info_div.get_text(strip=True)\n\n    state: str = \"Unknown\"\n    cities: str = \"Unkown\"\n\n    if \"their location and provider\" in phone_info_list:\n        state = phone_info_list[phone_info_list.index(\"their location and provider\") + 1]\n\n    if \"Area code location\" in phone_info_list:\n        cities = phone_info_list[phone_info_list.index(\"Area code location\") + 1]\n\n    formatted_phone_info: dict = {\n        \"spam_info\": spam_info,\n        \"state\": state,\n        \"cities\": cities,\n        \"area_code\": self.phone_number[2:5] if self.phone_number else \"Unknown\",\n        \"url\": url,\n    }\n\n    return formatted_phone_info\n</code></pre>"},{"location":"api/phone.html#features","title":"Features","text":"<ul> <li>Lookup phone numbers to retrieve spam risk, state, cities, area code, and profile URL</li> <li>Handles request retries and optional header randomization</li> </ul>"},{"location":"api/phone.html#example-usage","title":"Example Usage","text":"<pre><code>from whitepyges import Phone\n\nphone: Phone = Phone(phone_number='123-456-7890')\ninfo: dict = phone.search()\n\nprint(info)\n</code></pre>"},{"location":"api/phone.html#example-response","title":"Example Response","text":"<pre><code>{\n    \"spam_info\": \"LOW SPAM RISK\",\n    \"state\": \"Washington\",\n    \"cities\": \"Example, Example-2, Examples 3\",\n    \"area_code\": \"123\",\n    \"url\": \"https://www.whitepages.com/phone/1-123-456-7890\"\n}\n</code></pre>"},{"location":"guides/usage.html","title":"Usage","text":""},{"location":"guides/usage.html#respecting-robotstxt","title":"Respecting robots.txt","text":"<p>Whitepyges retrieves information from Whitepages.com using web scraping techniques. By default, the library checks and abides by the site's <code>robots.txt</code> rules to ensure responsible and ethical scraping. This means that if a particular action is disallowed by <code>robots.txt</code>, Whitepyges will not perform that request.</p>"},{"location":"guides/usage.html#overriding-robotstxt","title":"Overriding robots.txt","text":"<p>If you encounter issues where a search is blocked due to <code>robots.txt</code> restrictions, you can override this behavior by setting the <code>ignore_robots</code> parameter to <code>True</code> in your search methods. This will instruct Whitepyges to ignore the <code>robots.txt</code> rules and proceed with the request.</p> <p>Example:</p> <pre><code>from whitepyges import Address\n\naddress = Address(street=\"123 Main St\", city=\"Springfield\", state=\"IL\")\n# This will ignore robots.txt and perform the search anyway\nresidents = address.search(ignore_robots=True)\n</code></pre>"},{"location":"guides/usage.html#note","title":"Note","text":"<p>By default, Whitepyges respects robots.txt to comply with website policies. Use the ignore_robots option responsibly and only if you understand the implications of bypassing these restrictions.</p>"},{"location":"coverage.html","title":"Coverage Report","text":""}]}